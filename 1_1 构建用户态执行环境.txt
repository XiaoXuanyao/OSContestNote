1) 用户态最小化执行环境
   a) 执行环境初始化
      给rust编译器提供入口函数_start()，在main.rs中添加：
	#[unsafe(no_mangle)]
	extern "C" fn _start() {
	    loop{};
	}
      [no_mangle]用于指示编译器不要改变某个函数、静态变量或结构体字段的名称。
      报错no_mangle：usage of unsafe attribute：新版本rust需使用unsafe(no_mangle)
      再次反汇编：rust-objdump -S target/riscv64gc-unknown-none-elf/debug/os1
      输出：
	target/riscv64gc-unknown-none-elf/debug/os1:	file format elf64-littleriscv

	Disassembly of section .text:

	0000000000011158 <_start>:
	warning: address range table at offset 0x30 has a premature terminator entry at offset 0x40
	;     loop{};
	   11158: a009         	j	0x1115a <_start+0x2>
	   1115a: a001         	j	0x1115a <_start+0x2>
   b) 注释掉入口函数中的loop{};
      编译： cargo build
      反汇编：rust-objdump -S target/riscv64gc-unknown-none-elf/debug/os1
         11158: 8082         	ret
      qemu执行：qemu-riscv64 target/riscv64gc-unknown-none-elf/debug/os1
      执行结果：Segmentation fault (core dumped)
      执行环境还没有退出机制，需要操作系统提供的exit系统调用来退出程序
   c) 添加sys_exit函数：
	const SYSCALL_EXIT: usize = 93;

	fn syscall(id: usize, args: [usize; 3]) -> isize {
	    let mut ret;
	    unsafe {
		core::arch::asm!(
		    "ecall",
		    inlateout("x10") args[0] => ret,
		    in("x11") args[1],
		    in("x12") args[2],
		    in("x17") id,
		);
	    }
	    ret
	}

	pub fn sys_exit(xstate: i32) -> isize {
	    syscall(SYSCALL_EXIT, [xstate as usize, 0, 0])
	}

	#[unsafe(no_mangle)]
	extern "C" fn _start() {
	    sys_exit(9);
	}
	
	// vim:  dd：整行删除  u：撤回(undo)
   d) 打印返回值：
      qemu-riscv64 target/riscv64gc-unknown-none-elf/debug/os; echo $?
      输出：9

2) 有显示支持的用户态执行环境
   a) 封装SYSCALL_WRITE 系统调用
	const SYSCALL_WRITE: usize = 64;

	pub fn sys_write(fd: usize, buffer: &[u8]) -> isize {
	  syscall(SYSCALL_WRITE, [fd, buffer.as_ptr() as usize, buffer.len()])
	}
   b) 基于 Write Trait的数据结构，完成write_str函数，并用print函数包装
      Trait是一种定义共享行为的机制，类似于其他语言中的接口，用于抽象类型必须实现的方法或功能，从而实现多态和代码复用
	struct Stdout;

	impl Write for Stdout {
	    fn write_str(&mut self, s: &str) -> fmt::Result {
		sys_write(1, s.as_bytes());
		Ok(())
	    }
	}

	pub fn print(args: fmt::Arguments) {
	    Stdout.write_fmt(args).unwrap();
	}
   c) 基于print函数，实现Rust语言格式化宏
	#[macro_export]
	macro_rules! print {
	    ($fmt: literal $(, $($arg: tt)+)?) => {
		$crate::console::print(format_args!($fmt $(, $($arg)+)?));
	    }
	}

	#[macro_export]
	macro_rules! println {
	    ($fmt: literal $(, $($arg: tt)+)?) => {
		print(format_args!(concat!($fmt, "\n") $(, $($arg)+)?));
	    }
	}
   d) 在主程序中加入println!("Hello, world!");
      编译：cargo build
      如果将各个调用封装进不同的文件，首先需要将所有模块声明在crate根（main.rs或lib.rs）中声明，然后可采用绝对路径crate::module_path::func()来进行函数调用，接着应该声明 use core::fmt; 和 use core::fmt::Write;
      如果出现报错：'print' not found in this scope，需要使用绝对路径进行调用：cargo::print::print
      #[used] ：告诉编译器该变量会被外部使用，如果出现报错 error: attribute must be applied to a `static` variable，是因为此属性不能对函数使用，对函数进行属性修饰，应使用 #[allow(dead_code)]
      如果反编译没有产生任何代码，确认main.src中_start()入口函数前进行了#[unsafe(no_mangle)]声明
   e) 运行：qemu-riscv64 target/riscv64gc-unknown-none-elf/debug/os1; echo $?
      成功输出：
	Hello, world!
	9
