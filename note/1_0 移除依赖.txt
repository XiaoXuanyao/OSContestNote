1) 使用cargo创建一个简单的Rust程序
   cargo new os1 (记此项目为os1)
   sudo apt install tree (安装插件查看目录的树形结构)
   tree os1
   结果：
	os1
	├── Cargo.toml  // 项目的库依赖、作者信息等
	└── src  // 项目源代码目录
	      └── main.rs

	2 directories, 2 files

2) 构建并运行项目
   cd ~/OSContest/os1
   cargo run
   结果：
	warning: `/home/hlchen/.cargo/config` is deprecated in favor of `config.toml`
	note: if you need to support cargo 1.38 or earlier, you can symlink `config` to `config.toml`
	   Compiling os1 v0.1.0 (/home/hlchen/OSContest/os1)
	    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s
	     Running `target/debug/os1`
	Hello, world!

3) 平台与目标三元组
   a) 使用 rustc --version --verbose 打印默认的环境信息
      默认目标平台是 x86_64-unknown-linux-gnu
      目标三元组 (Target Triplet) 描述了目标平台的 CPU 指令集、操作系统类型和标准运行时库
      例如：
      riscv64gc-unknown-none-elf是一个目标三元组，
      riscv64：64 位 RISC-V 架构（使用的是 RV64），
         G：代表 "General purpose" 扩展包（包括 I、M、A、F、D 等）
         C: 压缩指令（Compressed），可以让指令更短，减小程序大小，提高性能
      unknown：表示供应商是未知的，
      none：没有操作系统，即 裸机开发
      elf：最终编译输出是标准的 ELF 文件格式
   b) 修改目标平台
      将目标平台换成 riscv64gc-unknown-none-elf 后运行：
      cargo run --target riscv64gc-unknown-none-elf
      出现报错：error: cannot find macro `println` in this scope

4) 移除标准库依赖
   a) 交叉编译：编译器运行的平台与可执行文件运行的目标平台不同
      在os1目录下新建.cargo目录，在此目录下创建config.toml文件（），输入内容：
	# os1/.cargo/config.toml
	[build]
	target = "riscv64gc-unknown-none-elf"
      这将使cargo工具在os1目录下默认使用riscv64gc-unknown-none-elf作为目标平台。
      现在执行cargo run，将默认使用riscv64gc-unknown-none-elf
   b) 不使用标准库
      在 main.rs 的开头加上一行 #![no_std]， 告诉 Rust 编译器不使用 Rust 标准库 std 转而使用核心库 core。
      #![xxx] 声明了一个内部属性，内部属性将作用于整个crate或整个模块，通常放置于文件头部
      // crate是最小编译单元，也是rust包管理的基本单位，可理解为一个库文件或可执行文件
      #[xxx] 声明了一个外部属性，外部属性作用于紧挨着的项
      然后编译，报错：error: cannot find macro `println` in this scope
      将 println!("Hello, world!"); 注释掉
      再次编译报错：error: `#[panic_handler]` function required, but not found
   c) 标准库存在#[panic_handler]，而核心库没有，需要实现：
      新建一个子模块lang_items.rs，在里面编写panic汉书，通过#[panic_handler]告诉编译器采用我们的实现
	// os/src/lang_items.rs
	use core::panic::PanicInfo;

	#[panic_handler]
	fn panic(_info: &PanicInfo) -> ! {
	    loop {}
	}
      编译，报错：error: using `fn main` requires the standard library
   d) 移除main函数
      在 main.rs 的开头加入设置 #![no_main]
      编译，编译通过，如果出现警告：warning: `/home/hlchen/.cargo/config` is deprecated in favor of `config.toml`，重命名即可：mv /home/hlchen/.cargo/config /home/hlchen/.cargo/config.toml
   e) 分析被移除标准库的程序
      I. file target/riscv64gc-unknown-none-elf/debug/os1
      结果：target/riscv64gc-unknown-none-elf/debug/os1: ELF 64-bit LSB executable, UCB RISC-V, RVC, double-float ABI, version 1 (SYSV), statically linked, with debug_info, not stripped
      II. rust-readobj -h target/riscv64gc-unknown-none-elf/debug/os1
      如果报错 Could not find tool: readobj
      运行： rustup component add llvm-tools-preview
      结果：
	  Type: Executable (0x2)
	  Machine: EM_RISCV (0xF3)
	  Version: 1
	  Entry: 0x0  // 空程序
      III. rust-objdump -S target/riscv64gc-unknown-none-elf/debug/os1
      反汇编没有生成任何汇编代码。
