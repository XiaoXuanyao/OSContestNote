0) 在标准项目目录下，切换到ch2分支：git checkout ch2
   然后，拉取用户程序：git clone https://github.com/LearningOS/rCore-Tutorial-Test-2025S.git user
   如果报错：fatal: unable to access 'https://github.com/LearningOS/rCore-Tutorial-Test-2025S.git/': Could not resolve host: github.com，打开clash，切换到tun模式，再次运行git指令即可

1) 运行本章代码
   cd os
   make run LOG=INFO
   运行成功，运行结果一致

2) 实现应用程序：
   a) 用户程序的载入：通过link_section将_start函数编译后的汇编代码放在.text.entry的代码段中。
      在其开始运行时，手动清空.bss段，然后调用main函数得到一个i32的返回值，然后调用用户库提供的exit接口退出。
      在连接时，weak弱连接保证，如果用户程序中没有任何main，也可以编译通过，但会在运行时报错。
   b) 系统调用的封装
   
3) 将应用程序链接到内核
   a) link_app.S：汇编代码段，记录了：../user/build/bin/目录下所有二进制文件（应用程序）按名称排序后，应用程序的数量 和 每个应用程序的起始地址和结束地址
   b) 找到并加载应用程序二进制码：从上面生成的汇编代码段中获得应用程序数量和各应用程序的起始地址，应用程序的长度可以表示为下一个应用程序的起始地址减当前应用程序的起始地址。
   c) 清空指令缓存：core::arch::asm!("fence.i")
   d) 将此应用程序的代码复制到以APP_BASE_ADDRESS（0x80400000）开头的地址中。
